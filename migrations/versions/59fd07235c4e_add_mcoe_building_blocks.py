"""Add mcoe building blocks.

Revision ID: 59fd07235c4e
Revises: e257545db8de
Create Date: 2023-05-01 13:24:41.792590
"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "59fd07235c4e"
down_revision = "e257545db8de"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "heat_rate_by_unit_monthly",
        sa.Column("report_date", sa.Date(), nullable=False, comment="Date reported."),
        sa.Column(
            "plant_id_eia",
            sa.Integer(),
            nullable=False,
            comment="The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.",
        ),
        sa.Column(
            "unit_id_pudl",
            sa.Integer(),
            nullable=False,
            comment="Dynamically assigned PUDL unit id. WARNING: This ID is not guaranteed to be static long term as the input data and algorithm may evolve over time.",
        ),
        sa.Column(
            "net_generation_mwh",
            sa.Float(),
            nullable=True,
            comment="Net electricity generation for the specified period in megawatt-hours (MWh).",
        ),
        sa.Column(
            "fuel_consumed_mmbtu",
            sa.Float(),
            nullable=True,
            comment="Total consumption of fuel in physical unit, year to date. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.",
        ),
        sa.Column(
            "heat_rate_mmbtu_mwh",
            sa.Float(),
            nullable=True,
            comment="Fuel content per unit of electricity generated. Coming from MCOE calculation.",
        ),
        sa.ForeignKeyConstraint(
            ["plant_id_eia", "report_date"],
            ["plants_eia860.plant_id_eia", "plants_eia860.report_date"],
        ),
        sa.PrimaryKeyConstraint("report_date", "plant_id_eia", "unit_id_pudl"),
    )
    op.create_table(
        "heat_rate_by_unit_yearly",
        sa.Column("report_date", sa.Date(), nullable=False, comment="Date reported."),
        sa.Column(
            "plant_id_eia",
            sa.Integer(),
            nullable=False,
            comment="The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.",
        ),
        sa.Column(
            "unit_id_pudl",
            sa.Integer(),
            nullable=False,
            comment="Dynamically assigned PUDL unit id. WARNING: This ID is not guaranteed to be static long term as the input data and algorithm may evolve over time.",
        ),
        sa.Column(
            "net_generation_mwh",
            sa.Float(),
            nullable=True,
            comment="Net electricity generation for the specified period in megawatt-hours (MWh).",
        ),
        sa.Column(
            "fuel_consumed_mmbtu",
            sa.Float(),
            nullable=True,
            comment="Total consumption of fuel in physical unit, year to date. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.",
        ),
        sa.Column(
            "heat_rate_mmbtu_mwh",
            sa.Float(),
            nullable=True,
            comment="Fuel content per unit of electricity generated. Coming from MCOE calculation.",
        ),
        sa.ForeignKeyConstraint(
            ["plant_id_eia", "report_date"],
            ["plants_eia860.plant_id_eia", "plants_eia860.report_date"],
        ),
        sa.PrimaryKeyConstraint("report_date", "plant_id_eia", "unit_id_pudl"),
    )
    op.create_table(
        "capacity_factor_by_generator_monthly",
        sa.Column("report_date", sa.Date(), nullable=False, comment="Date reported."),
        sa.Column(
            "plant_id_eia",
            sa.Integer(),
            nullable=False,
            comment="The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.",
        ),
        sa.Column(
            "generator_id",
            sa.Text(),
            nullable=False,
            comment="Generator ID is usually numeric, but sometimes includes letters. Make sure you treat it as a string!",
        ),
        sa.Column(
            "net_generation_mwh",
            sa.Float(),
            nullable=True,
            comment="Net electricity generation for the specified period in megawatt-hours (MWh).",
        ),
        sa.Column(
            "capacity_mw",
            sa.Float(),
            nullable=True,
            comment="Total installed (nameplate) capacity, in megawatts.",
        ),
        sa.Column(
            "capacity_factor",
            sa.Float(),
            nullable=True,
            comment="Fraction of potential generation that was actually reported for a plant part.",
        ),
        sa.ForeignKeyConstraint(
            ["plant_id_eia", "generator_id", "report_date"],
            [
                "generators_eia860.plant_id_eia",
                "generators_eia860.generator_id",
                "generators_eia860.report_date",
            ],
        ),
        sa.PrimaryKeyConstraint("report_date", "plant_id_eia", "generator_id"),
    )
    op.create_table(
        "capacity_factor_by_generator_yearly",
        sa.Column("report_date", sa.Date(), nullable=False, comment="Date reported."),
        sa.Column(
            "plant_id_eia",
            sa.Integer(),
            nullable=False,
            comment="The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.",
        ),
        sa.Column(
            "generator_id",
            sa.Text(),
            nullable=False,
            comment="Generator ID is usually numeric, but sometimes includes letters. Make sure you treat it as a string!",
        ),
        sa.Column(
            "net_generation_mwh",
            sa.Float(),
            nullable=True,
            comment="Net electricity generation for the specified period in megawatt-hours (MWh).",
        ),
        sa.Column(
            "capacity_mw",
            sa.Float(),
            nullable=True,
            comment="Total installed (nameplate) capacity, in megawatts.",
        ),
        sa.Column(
            "capacity_factor",
            sa.Float(),
            nullable=True,
            comment="Fraction of potential generation that was actually reported for a plant part.",
        ),
        sa.ForeignKeyConstraint(
            ["plant_id_eia", "generator_id", "report_date"],
            [
                "generators_eia860.plant_id_eia",
                "generators_eia860.generator_id",
                "generators_eia860.report_date",
            ],
        ),
        sa.PrimaryKeyConstraint("report_date", "plant_id_eia", "generator_id"),
    )
    op.create_table(
        "fuel_cost_by_generator_monthly",
        sa.Column("report_date", sa.Date(), nullable=False, comment="Date reported."),
        sa.Column(
            "plant_id_eia",
            sa.Integer(),
            nullable=False,
            comment="The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.",
        ),
        sa.Column(
            "generator_id",
            sa.Text(),
            nullable=False,
            comment="Generator ID is usually numeric, but sometimes includes letters. Make sure you treat it as a string!",
        ),
        sa.Column(
            "unit_id_pudl",
            sa.Integer(),
            nullable=True,
            comment="Dynamically assigned PUDL unit id. WARNING: This ID is not guaranteed to be static long term as the input data and algorithm may evolve over time.",
        ),
        sa.Column("plant_name_eia", sa.Text(), nullable=True, comment="Plant name."),
        sa.Column(
            "plant_id_pudl",
            sa.Integer(),
            nullable=True,
            comment="A manually assigned PUDL plant ID. May not be constant over time.",
        ),
        sa.Column(
            "utility_id_eia",
            sa.Integer(),
            nullable=True,
            comment="The EIA Utility Identification number.",
        ),
        sa.Column(
            "utility_name_eia",
            sa.Text(),
            nullable=True,
            comment="The name of the utility.",
        ),
        sa.Column(
            "utility_id_pudl",
            sa.Integer(),
            nullable=True,
            comment="A manually assigned PUDL utility ID. May not be stable over time.",
        ),
        sa.Column(
            "fuel_type_count",
            sa.Integer(),
            nullable=True,
            comment="A count of how many different simple energy sources there are associated with a generator.",
        ),
        sa.Column(
            "fuel_type_code_pudl",
            sa.Enum(
                "coal",
                "gas",
                "hydro",
                "nuclear",
                "oil",
                "other",
                "solar",
                "waste",
                "wind",
            ),
            nullable=True,
            comment="Simplified fuel type code used in PUDL",
        ),
        sa.Column(
            "fuel_cost_from_eiaapi",
            sa.Boolean(),
            nullable=True,
            comment="Indicates whether the fuel cost was derived from the EIA API.",
        ),
        sa.Column(
            "fuel_cost_per_mmbtu",
            sa.Float(),
            nullable=True,
            comment="Average fuel cost per mmBTU of heat content in nominal USD.",
        ),
        sa.Column(
            "heat_rate_mmbtu_mwh",
            sa.Float(),
            nullable=True,
            comment="Fuel content per unit of electricity generated. Coming from MCOE calculation.",
        ),
        sa.Column(
            "fuel_cost_per_mwh",
            sa.Float(),
            nullable=True,
            comment="Derived from MCOE, a unit level value. Average fuel cost per MWh of heat content in nominal USD.",
        ),
        sa.ForeignKeyConstraint(
            ["plant_id_eia", "generator_id", "report_date"],
            [
                "generators_eia860.plant_id_eia",
                "generators_eia860.generator_id",
                "generators_eia860.report_date",
            ],
        ),
        sa.ForeignKeyConstraint(
            ["plant_id_pudl"],
            ["plants_pudl.plant_id_pudl"],
        ),
        sa.ForeignKeyConstraint(
            ["utility_id_eia", "report_date"],
            ["utilities_eia860.utility_id_eia", "utilities_eia860.report_date"],
        ),
        sa.ForeignKeyConstraint(
            ["utility_id_pudl"],
            ["utilities_pudl.utility_id_pudl"],
        ),
        sa.PrimaryKeyConstraint("report_date", "plant_id_eia", "generator_id"),
    )
    op.create_table(
        "fuel_cost_by_generator_yearly",
        sa.Column("report_date", sa.Date(), nullable=False, comment="Date reported."),
        sa.Column(
            "plant_id_eia",
            sa.Integer(),
            nullable=False,
            comment="The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.",
        ),
        sa.Column(
            "generator_id",
            sa.Text(),
            nullable=False,
            comment="Generator ID is usually numeric, but sometimes includes letters. Make sure you treat it as a string!",
        ),
        sa.Column(
            "unit_id_pudl",
            sa.Integer(),
            nullable=True,
            comment="Dynamically assigned PUDL unit id. WARNING: This ID is not guaranteed to be static long term as the input data and algorithm may evolve over time.",
        ),
        sa.Column("plant_name_eia", sa.Text(), nullable=True, comment="Plant name."),
        sa.Column(
            "plant_id_pudl",
            sa.Integer(),
            nullable=True,
            comment="A manually assigned PUDL plant ID. May not be constant over time.",
        ),
        sa.Column(
            "utility_id_eia",
            sa.Integer(),
            nullable=True,
            comment="The EIA Utility Identification number.",
        ),
        sa.Column(
            "utility_name_eia",
            sa.Text(),
            nullable=True,
            comment="The name of the utility.",
        ),
        sa.Column(
            "utility_id_pudl",
            sa.Integer(),
            nullable=True,
            comment="A manually assigned PUDL utility ID. May not be stable over time.",
        ),
        sa.Column(
            "fuel_type_count",
            sa.Integer(),
            nullable=True,
            comment="A count of how many different simple energy sources there are associated with a generator.",
        ),
        sa.Column(
            "fuel_type_code_pudl",
            sa.Enum(
                "coal",
                "gas",
                "hydro",
                "nuclear",
                "oil",
                "other",
                "solar",
                "waste",
                "wind",
            ),
            nullable=True,
            comment="Simplified fuel type code used in PUDL",
        ),
        sa.Column(
            "fuel_cost_from_eiaapi",
            sa.Boolean(),
            nullable=True,
            comment="Indicates whether the fuel cost was derived from the EIA API.",
        ),
        sa.Column(
            "fuel_cost_per_mmbtu",
            sa.Float(),
            nullable=True,
            comment="Average fuel cost per mmBTU of heat content in nominal USD.",
        ),
        sa.Column(
            "heat_rate_mmbtu_mwh",
            sa.Float(),
            nullable=True,
            comment="Fuel content per unit of electricity generated. Coming from MCOE calculation.",
        ),
        sa.Column(
            "fuel_cost_per_mwh",
            sa.Float(),
            nullable=True,
            comment="Derived from MCOE, a unit level value. Average fuel cost per MWh of heat content in nominal USD.",
        ),
        sa.ForeignKeyConstraint(
            ["plant_id_eia", "generator_id", "report_date"],
            [
                "generators_eia860.plant_id_eia",
                "generators_eia860.generator_id",
                "generators_eia860.report_date",
            ],
        ),
        sa.ForeignKeyConstraint(
            ["plant_id_pudl"],
            ["plants_pudl.plant_id_pudl"],
        ),
        sa.ForeignKeyConstraint(
            ["utility_id_eia", "report_date"],
            ["utilities_eia860.utility_id_eia", "utilities_eia860.report_date"],
        ),
        sa.ForeignKeyConstraint(
            ["utility_id_pudl"],
            ["utilities_pudl.utility_id_pudl"],
        ),
        sa.PrimaryKeyConstraint("report_date", "plant_id_eia", "generator_id"),
    )
    op.create_table(
        "heat_rate_by_generator_monthly",
        sa.Column("report_date", sa.Date(), nullable=False, comment="Date reported."),
        sa.Column(
            "plant_id_eia",
            sa.Integer(),
            nullable=False,
            comment="The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.",
        ),
        sa.Column(
            "unit_id_pudl",
            sa.Integer(),
            nullable=True,
            comment="Dynamically assigned PUDL unit id. WARNING: This ID is not guaranteed to be static long term as the input data and algorithm may evolve over time.",
        ),
        sa.Column(
            "generator_id",
            sa.Text(),
            nullable=False,
            comment="Generator ID is usually numeric, but sometimes includes letters. Make sure you treat it as a string!",
        ),
        sa.Column(
            "heat_rate_mmbtu_mwh",
            sa.Float(),
            nullable=True,
            comment="Fuel content per unit of electricity generated. Coming from MCOE calculation.",
        ),
        sa.Column(
            "fuel_type_code_pudl",
            sa.Enum(
                "coal",
                "gas",
                "hydro",
                "nuclear",
                "oil",
                "other",
                "solar",
                "waste",
                "wind",
            ),
            nullable=True,
            comment="Simplified fuel type code used in PUDL",
        ),
        sa.Column(
            "fuel_type_count",
            sa.Integer(),
            nullable=True,
            comment="A count of how many different simple energy sources there are associated with a generator.",
        ),
        sa.ForeignKeyConstraint(
            ["plant_id_eia", "generator_id", "report_date"],
            [
                "generators_eia860.plant_id_eia",
                "generators_eia860.generator_id",
                "generators_eia860.report_date",
            ],
        ),
        sa.PrimaryKeyConstraint("report_date", "plant_id_eia", "generator_id"),
    )
    op.create_table(
        "heat_rate_by_generator_yearly",
        sa.Column("report_date", sa.Date(), nullable=False, comment="Date reported."),
        sa.Column(
            "plant_id_eia",
            sa.Integer(),
            nullable=False,
            comment="The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.",
        ),
        sa.Column(
            "unit_id_pudl",
            sa.Integer(),
            nullable=True,
            comment="Dynamically assigned PUDL unit id. WARNING: This ID is not guaranteed to be static long term as the input data and algorithm may evolve over time.",
        ),
        sa.Column(
            "generator_id",
            sa.Text(),
            nullable=False,
            comment="Generator ID is usually numeric, but sometimes includes letters. Make sure you treat it as a string!",
        ),
        sa.Column(
            "heat_rate_mmbtu_mwh",
            sa.Float(),
            nullable=True,
            comment="Fuel content per unit of electricity generated. Coming from MCOE calculation.",
        ),
        sa.Column(
            "fuel_type_code_pudl",
            sa.Enum(
                "coal",
                "gas",
                "hydro",
                "nuclear",
                "oil",
                "other",
                "solar",
                "waste",
                "wind",
            ),
            nullable=True,
            comment="Simplified fuel type code used in PUDL",
        ),
        sa.Column(
            "fuel_type_count",
            sa.Integer(),
            nullable=True,
            comment="A count of how many different simple energy sources there are associated with a generator.",
        ),
        sa.ForeignKeyConstraint(
            ["plant_id_eia", "generator_id", "report_date"],
            [
                "generators_eia860.plant_id_eia",
                "generators_eia860.generator_id",
                "generators_eia860.report_date",
            ],
        ),
        sa.PrimaryKeyConstraint("report_date", "plant_id_eia", "generator_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("heat_rate_by_generator_yearly")
    op.drop_table("heat_rate_by_generator_monthly")
    op.drop_table("fuel_cost_by_generator_yearly")
    op.drop_table("fuel_cost_by_generator_monthly")
    op.drop_table("capacity_factor_by_generator_yearly")
    op.drop_table("capacity_factor_by_generator_monthly")
    op.drop_table("heat_rate_by_unit_yearly")
    op.drop_table("heat_rate_by_unit_monthly")
    # ### end Alembic commands ###
