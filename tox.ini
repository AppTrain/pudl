[tox]
envlist = ci

[testenv]
whitelist_externals =
    bash
    coverage
# shared directory for re-used packages
envdir = {toxinidir}/.env_pudl
passenv =
    CI
    HOME
    GITHUB_*
    API_KEY_EIA
    GOOGLE_APPLICATION_CREDENTIALS
covargs = --cov={envsitepackagesdir}/pudl --cov-append --cov-report=xml --cov-config=.coveragerc

###########################################################################
# Code and Documentation Linters
###########################################################################
[testenv:flake8]
description = Run the full suite of flake8 linters on the PUDL codebase.
skip_install = true
deps =
    flake8
    flake8-builtins
    flake8-colors
    flake8-docstrings
    flake8-rst-docstrings
    flake8-use-fstring
    mccabe
    pep8-naming
    pycodestyle
    pydocstyle
    pyflakes
commands =
    flake8 --config .flake8 src/pudl/ test/ setup.py

[testenv:pre_commit]
description = Run git pre-commit hooks not covered by the other linters.
skip_install = true
deps =
    pre-commit
commands =
    pre-commit run --all-files --show-diff-on-failure python-no-eval
    pre-commit run --all-files --show-diff-on-failure python-no-log-warn
    pre-commit run --all-files --show-diff-on-failure python-check-blanket-noqa
    pre-commit run --all-files --show-diff-on-failure check-merge-conflict
    pre-commit run --all-files --show-diff-on-failure check-yaml
    pre-commit run --all-files --show-diff-on-failure check-case-conflict
    pre-commit run --all-files --show-diff-on-failure debug-statements
    pre-commit run --all-files --show-diff-on-failure name-tests-test

[testenv:bandit]
description = Check the PUDL codebase for common insecure code patterns.
skip_install = true
deps =
    bandit
commands =
    bandit -r src/pudl/ -c .bandit.yml

[testenv:linters]
description = Run the pre-commit, flake8 and bandit linters.
skip_install = true
deps =
    {[testenv:pre_commit]deps}
    {[testenv:bandit]deps}
    {[testenv:flake8]deps}
commands =
    {[testenv:pre_commit]commands}
    {[testenv:bandit]commands}
    {[testenv:flake8]commands}

###########################################################################
# Lint and Build the Docs
###########################################################################
[testenv:doc8]
description = Check the documentation input files for syntactical correctness.
skip_install = true
deps =
    sphinx
    doc8
commands =
    doc8 docs/

[testenv:docs]
description = Remove old docs output and rebuild HTML from scratch with Sphinx
skip_install = false
deps =
    {[testenv:doc8]deps}
extras =
    doc
commands =
    # Remove the old docs build output to start fresh
    bash -c 'rm -rf docs/_build docs/api/*.rst'
    # Generate sphinx-autodoc entries for the API, excluding unpublished stuff
    sphinx-apidoc \
      --separate \
      --output-dir docs/api src/pudl \
      "src/pudl/package_data/*" \
      "src/pudl/analysis/analysis.py" \
      "src/pudl/analysis/demand_mapping.py" \
      "src/pudl/glue/zipper.py" \
      "*_test.py"
    # Run the doc8 linter on the newly generated doc input files
    {[testenv:doc8]commands}
    # Try to generate the HTML tocs with Sphinx
    sphinx-build -W -b html docs docs/_build/html

###########################################################################
# Test the code and validate data
###########################################################################
[testenv:unit]
description = Run all the unit tests under test/unit.
extras =
    test
commands =
    pytest {posargs} {[testenv]covargs} test/unit

[testenv:ferc1_solo]
description = Test that FERC 1 can be loaded into PUDL in isolation.
extras =
    test
commands =
    pytest {posargs} {[testenv]covargs} \
      --etl-settings test/settings/ferc1-solo-test.yml \
      test/integration/etl_test.py::test_pudl_engine

[testenv:integration]
description = Run all software integration tests, processing a full year of data.
extras =
    test
commands =
    pytest {posargs} {[testenv]covargs} test/integration

[testenv:validate]
description = Run all data validation tests. Requires a complete PUDL DB.
skip_install = false
extras =
    test
commands =
    pytest --live-dbs test/validate

[testenv:ci]
description = Run all continuous integration (CI) checks & generate test coverage.
skip_install = false
extras =
    {[testenv:docs]extras}
    {[testenv:integration]extras}
deps =
    {[testenv:linters]deps}
commands =
    coverage erase
    {[testenv:linters]commands}
    {[testenv:docs]commands}
    {[testenv:unit]commands}
    {[testenv:ferc1_solo]commands}
    {[testenv:integration]commands}
    coverage report --sort=cover

[testenv:ferc1_schema]
description = Verify FERC Form 1 DB schema are compatible for all years.
skip_install = false
extras =
    {[testenv:integration]extras}
commands =
    pytest {posargs} {[testenv]covargs} \
      --etl-settings test/settings/full-integration-test.yml \
      test/integration/etl_test.py::test_ferc1_schema

[testenv:full_integration]
description = Run ETL and integration tests for all years and data sources.
skip_install = false
extras =
    {[testenv:integration]extras}
commands =
    pytest {posargs} {[testenv]covargs} \
      --etl-settings test/settings/full-integration-test.yml \
      test/integration

[testenv:exhaustive]
description = Run all CI checks, but for all years of data.
skip_install = false
extras =
    {[testenv:docs]extras}
    {[testenv:integration]extras}
deps =
    {[testenv:linters]deps}
commands =
    coverage erase
    {[testenv:linters]commands}
    {[testenv:docs]commands}
    {[testenv:unit]commands}
    {[testenv:ferc1_solo]commands}
    {[testenv:ferc1_schema]commands}
    {[testenv:full_integration]commands}
    coverage report --sort=cover

###########################################################################
# Software Package Build & Release
###########################################################################
[testenv:build]
description = Prepare Python source and binary packages for release.
basepython = python3
skip_install = true
deps =
    wheel
    setuptools
    setuptools_scm
commands =
    bash -c 'rm -rf build/* dist/*'
    python setup.py sdist bdist_wheel

[testenv:testrelease]
description = Do a dry run of Python package release using the PyPI test server.
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine
commands =
    {[testenv:build]commands}
    twine check dist/*
    twine upload --sign --verbose --repository testpypi --skip-existing dist/*

[testenv:release]
description = Release the PUDL package to the production PyPI server.
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine
commands =
    {[testenv:build]commands}
    twine check dist/*
    twine upload --sign --verbose --skip-existing dist/*

###########################################################################
# Configuration for various tools.
###########################################################################
[doc8]
max-line-length = 88
ignore-path =
    docs/ferc/form1
    docs/_build
