[tox]
envlist =
    bandit
    build
    doc8
    docs
    integration
    flake8
    linters
    pre-commit
    release
    testrelease
    ci
    validate
    unit

[testenv]
whitelist_externals =
    bash
    coverage
# shared directory for re-used packages
envdir = {toxinidir}/.env_pudl
passenv =
    CI
    HOME
    GITHUB_*
    API_KEY_EIA
    GOOGLE_APPLICATION_CREDENTIALS

###########################################################################
###########################################################################
# Code and Documentation Linters
###########################################################################
###########################################################################

###########################################################################
[testenv:flake8]
description = Run the full suite of flake8 linters on the PUDL codebase.
skip_install = true
deps =
    flake8
    flake8-builtins
    flake8-colors
    flake8-docstrings
    flake8-rst-docstrings
    flake8-use-fstring
    mccabe
    pep8-naming
    pycodestyle
    pydocstyle
    pyflakes
commands =
    flake8 --config .flake8 src/pudl/ test/ setup.py

###########################################################################
[testenv:doc8]
description = Check the documentation input files for syntactical correctness.
skip_install = true
deps =
    sphinx
    doc8
commands =
    doc8 docs/

###########################################################################
[testenv:pre-commit]
description = Run git pre-commit hooks not covered by the other linters.
skip_install = true
deps =
    pre-commit
commands =
    pre-commit run --all-files --show-diff-on-failure python-no-eval
    pre-commit run --all-files --show-diff-on-failure python-no-log-warn
    pre-commit run --all-files --show-diff-on-failure python-check-blanket-noqa
    pre-commit run --all-files --show-diff-on-failure check-merge-conflict
    pre-commit run --all-files --show-diff-on-failure check-yaml
    pre-commit run --all-files --show-diff-on-failure check-case-conflict
    pre-commit run --all-files --show-diff-on-failure debug-statements
    pre-commit run --all-files --show-diff-on-failure name-tests-test

[testenv:bandit]
description = Check the PUDL codebase for common insecure code patterns.
skip_install = true
deps =
    bandit
commands =
    bandit -r src/pudl/ -c .bandit.yml

###########################################################################
[testenv:linters]
description = Run the bandit, pre-commit, and flake8 linters.
skip_install = true
deps =
    {[testenv:pre-commit]deps}
    {[testenv:bandit]deps}
    {[testenv:flake8]deps}
commands =
    {[testenv:pre-commit]commands}
    {[testenv:bandit]commands}
    {[testenv:flake8]commands}

###########################################################################
###########################################################################
# Test code, build docs, validate data
###########################################################################
###########################################################################

###########################################################################
# Run all software integration tests.
# * Without any arguments, this will try to download and process *all* data
# * If you just want to do one year, you need to pass --fast to pytest
# * If you don't want it to download, you need to pass --pudl_in=AUTO
[testenv:integration]
description = Run all software integration tests, processing a full year of data.
extras =
    test
commands =
    pytest {posargs} \
      --cov={envsitepackagesdir}/pudl \
      --cov-append \
      --cov-report=term \
      --cov-report=xml \
      --cov-config=.coveragerc \
      test/integration

###########################################################################
[testenv:unit]
description = Run all the unit tests under test/unit.
extras =
    test
commands =
    pytest \
      --cov={envsitepackagesdir}/pudl \
      --cov-append \
      --cov-report=xml \
      --cov-config=.coveragerc \
      test/unit

###########################################################################
[testenv:validate]
description = Run all data validation tests. Requires a complete PUDL DB.
skip_install = false
extras =
    test
commands =
    pytest --live_dbs test/validate

###########################################################################
# Test building the Sphinx HTML docs:
# * Remove the old docs build output to start fresh
# * Generate sphinx-autodoc entries for the API, excluding unpublished stuff
# * Run the doc8 linter on the newly generated doc input files
# * Try to generate the HTML tocs with Sphinx
[testenv:docs]
description = Remove old docs output and rebuild the HTML from scratch.
skip_install = false
deps =
    {[testenv:doc8]deps}
extras =
    doc
commands =
    bash -c 'rm -rf docs/_build docs/api/*.rst'
    sphinx-apidoc \
      --separate \
      --output-dir docs/api src/pudl \
      "src/pudl/package_data/*" \
      "src/pudl/analysis/analysis.py" \
      "src/pudl/glue/zipper.py" \
      "*_test.py"
    {[testenv:doc8]commands}
    sphinx-build -W -b html docs docs/_build/html


###########################################################################
[testenv:ci]
description = Run all continuous integration (CI) checks & generate test coverage.
skip_install = false
extras =
    {[testenv:docs]extras}
    {[testenv:integration]extras}
deps =
    {[testenv:linters]deps}
commands =
    coverage erase
    {[testenv:linters]commands}
    {[testenv:unit]commands}
    {[testenv:docs]commands}
    {[testenv:integration]commands}

###########################################################################
###########################################################################
# Release tooling
###########################################################################
###########################################################################

###########################################################################
[testenv:build]
description = Prepare Python source and binary packages for release.
basepython = python3
skip_install = true
deps =
    wheel
    setuptools
    setuptools_scm
commands =
    bash -c 'rm -rf build/* dist/*'
    python setup.py sdist bdist_wheel

###########################################################################
[testenv:testrelease]
description = Do a dry run of Python package release using the PyPI test server.
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine
commands =
    {[testenv:build]commands}
    twine check dist/*
    twine upload --sign --verbose --repository testpypi --skip-existing dist/*

###########################################################################
[testenv:release]
description = Release the PUDL package to the production PyPI server.
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine
commands =
    {[testenv:build]commands}
    twine check dist/*
    twine upload --sign --verbose --skip-existing dist/*

###########################################################################
[doc8]
max-line-length = 88
ignore-path =
    docs/ferc/form1
    docs/_build
